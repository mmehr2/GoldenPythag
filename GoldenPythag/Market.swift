//
//  Market.swift
//  GoldenPythag
//
//  Created by Michael L Mehr on 3/2/15.
//  Copyright (c) 2015 Michael L. Mehr. All rights reserved.
//

import Foundation

/*
The Market is an essential concept of the app.
It describes a market for exchange-traded securities.
The basic struct is just a pairing of a fixed ID (used by the server implementation) and a user-readable name. The ID is used to refer to the market, not its name, as explained below.

There are two types of Markets in the app. The first (Default Market) is just referenced by its ID and is otherwise opaque to the app user. The server keeps the details hidden. The second type of Market is Custom Market, which is generated by the user for use in markets she is interested in that aren't provided by the service out of the box.

The Custom Market allows the user to define an Origin date (of start of trading) and a Market Location. The Market Locations themselves can be chosen from a convenience list of defaults, or can be entered totally by the user.

The GetDefaults() static/class functions are designed to create random test data for use before I fully implement CoreData persistence for the objects.
*/


// MARK: MarketObject generic template class

class Market {
    // this is the basic market - it pairs a name with an ID
    let id : Int
    
    // the name is not customizable, so get it from default data directly
    var name : String { return Market.GetDefaultName(id)! }
    
    init(ID idx: Int) {
        id = idx
    }
    
    // NOTE: in Swift 1.2 this can be a variable/property
    private struct Static {
       static let lastDefaultID = 10050 // room for expansion
    }
    private class func GetData() -> [Int:String] {
        return [
            10001: "Bonds",
            10002: "Cocoa",
            10003: "Silver",
            10004: "Gold",
            10005: "Crude Oil"
        ]
    }
    
    class func IsDefault(ID : Int) -> Bool {
        return GetData()[ID] != nil
    }
    
    class func GetDefaultName(ID : Int) -> String? {
        return GetData()[ID]
    }
    
    class func GetDefaults() -> [Market]
    {
        let names = GetData()
        var result = [Market]()
        for (idx, namex) in names {
            result.append(Market(ID: idx))
        }
        return result
    }
    
    class func GetNumDefaults() -> Int {
        return GetDefaults().count
    }
    
    class func GetRandomItem() -> Market {
        return GetDefaults()[ getRandomFrom(0, to: GetNumDefaults()) ]
    }
}

// this is the user-customized version
// it adds a natal/origin date and a location of trading
class CustomMarket : Market {
    /*
    NOTE: the base class name won't work here (no default names), so we add a private property to store the user's custom name, if any, and redefine the name property to allow setting and getting it
    */
    private var customName = "" // don't use this directly, use name instead
    override var name : String { // editable in derived class
        get {
            return customName
        }
        set {
            customName = newValue
        }
    }
    var origin : NSDate
    var location : MarketLocation
    
    // custom ID generator
    // Swift 1.2 would use a static/class variable instead of nested struct
    private struct Static {
        static var idCounter = Market.Static.lastDefaultID
    }
    class func assignCustomID() -> Int {
        return Static.idCounter++
    }
    
    init(name namex: String, withID idx: Int, andOrigin originx:NSDate, isAt loc:MarketLocation)
    {
        origin = originx
        location = loc
        customName = namex
        super.init(ID: idx)
    }
    
    // this cannot be allowed, because (A) we need more info, and (B) base class won't work
    override init(ID idx: Int) {
        fatalError("init(ID:) can not be implemented")
    }
    
}
